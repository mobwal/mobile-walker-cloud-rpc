#!/usr/bin/env node

/**
 * Module dependencies.
 */
const cluster = require('cluster');
const http = require('http');
const cpus = require('os').cpus;
const process = require('process');
const Console = require('../modules/log');

const args = require('../modules/conf')();
const numCPUs = args.thread || cpus().length;

var fs = require('fs');
var fx = require('mkdir-recursive');

process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 1;

if (cluster.isMaster) {
    var storage = require('../modules/utils').storage();
    if(!fs.existsSync(storage)) {
        fx.mkdirSync(storage);
    }

    require('./init')(false, function() {  // инициализация схемы БД
        Console.log(`Primary ${process.pid} is running`);

        // Fork workers.
        for (let i = 0; i < numCPUs; i++) {
            cluster.fork();
        }

        cluster.on('exit', (worker, code, signal) => {
            Console.log(`worker ${worker.process.pid} died`);

            cluster.fork();
        });
    });

    return;
}

const port = parseInt(args.port || '5000');
var server = null;

require('./init')(true, function() {  // инициализация схемы БД

    const socket = require('socket.io');
    const sync = require('../modules/sync');

    var app = require('../app');
    server = http.createServer(app);

    var io = socket(server, {
        path: vPath + 'socket.io',
        origins: '*:*'
    });
    sync.init(io);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

process.on('uncaughtException', function (err) {
    var db = require('../modules/dbcontext');
    db.provider.db().close();

    Console.debug('Подключение pg клиента закрыто.');
    Console.error(err.stack, 'err');

    process.exit();
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
      case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
      default:
        throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;

    console.log(`Listening ${process.pid} on ` + bind + ` ${args.virtual_dir_path}`);
}
